# Copyright (C) 2024 Tim Bastin, l3montree UG (haftungsbeschr√§nkt)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# DevSecOps Workflow Definition
# This workflow is triggered on every push to the repository
name: OCI Images Workflow

on:
  push:
    branches:
      - main
    tags:
      - '*'


# Environment variables used across multiple jobs
env:
  IMAGE_TAG: ghcr.io/${{ github.repository }}:unstable

jobs:
  # Docker image build job
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image_path: ${{ steps.build_output.outputs.image_path }}
    steps:
      - uses: actions/checkout@v4
      - name: Set IMAGE_TAG if tagged
        # Setting the image tag if the push is a tag push
        run: echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/')
      - name: Build Docker image with Kaniko
        # Building the Docker image using Kaniko
        id: build_image
        uses: docker://gcr.io/kaniko-project/executor:v1.9.2
        with:
          args: --destination=${{ env.IMAGE_TAG }} --context=/github/workspace --dockerfile=/github/workspace/Dockerfile --no-push --tarPath /github/workspace/image.tar
      - name: Upload artifact
        # Uploading the built Docker image as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  # Image scanning job to detect vulnerabilities in the built Docker image
  image-scanning:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Run Trivy vulnerability scanner in tarball mode
        # Running Trivy to scan the Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          input: /github/workspace/image.tar
          severity: "CRITICAL,HIGH"
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
          category: "image-scanning"

  # Publish job to push the Docker image to a registry
  publish:
    needs: [build-image, image-scanning, secret-scanning, sca, sast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - uses: imjasonh/setup-crane@v0.1
      - name: Set IMAGE_TAG if tagged
        # Setting the image tag if the push is a tag push
        run: echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/')
      - name: Push Docker image to GitHub image Registry
        # Pushing the Docker image to GitHub Container Registry
        run: crane push image.tar ${{ env.IMAGE_TAG }}
